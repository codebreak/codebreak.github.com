<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://codebreak.github.com/atom.xml" rel="self"/>
  <link href="http://codebreak.github.com/"/>
  <updated>2012-06-21T14:53:06-07:00</updated>
  <id>http://codebreak.github.com/</id>
  <author>
    <name><![CDATA[codebreaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Role of a Tester on a Project]]></title>
    <link href="http://codebreak.github.com/blog/2012/06/20/role-of-a-tester-on-a-project/"/>
    <updated>2012-06-20T19:46:00-07:00</updated>
    <id>http://codebreak.github.com/blog/2012/06/20/role-of-a-tester-on-a-project</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been noticing that the role of a tester has been slowly changing and converging with different roles on an Agile team. Instead of having a strictly defined set of tasks and responsibilities, I&#8217;ve often found my self wearing many different hats on a project. But I guess this only makes sense since collaboration is key in any successful team.</p>

<p>To illustrate my role, I&#8217;m going to use the process we followed at my previous project where we specified the status of specific product requirements (which we called &#8220;stories&#8221;) by the following:</p>

<h4>New</h4>

<p>During the time that stories are being created and broken down by the BAs and Devs, I&#8217;ve always found it useful to be present and provide input from the testers point of view.</p>

<h4>In Analysis</h4>

<p>Once BAs feel like their stories have the essential requirements for the developers, I&#8217;ll sit and &#8220;pair&#8221; with them for a bit. And together, we&#8217;ll go through the stories to make sure that 1. I understand what the stories entail and I am prepared to test</p>

<h4>Ready For Development</h4>

<h4>In Development</h4>

<h4>Ready for QA</h4>

<h4>In QA</h4>

<h4>Ready for Verification</h4>

<h4>Verified</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I am A TESTER.]]></title>
    <link href="http://codebreak.github.com/blog/2012/06/15/i-am-a-tester/"/>
    <updated>2012-06-15T14:56:00-07:00</updated>
    <id>http://codebreak.github.com/blog/2012/06/15/i-am-a-tester</id>
    <content type="html"><![CDATA[<p>Whenever I tell people that I am a Tester, they quickly respond with &#8220;Oh &#8230; you&#8217;re a QA.&#8221; No, I said that I AM A TESTER!</p>

<p>We all need to get rid of this notion that QAs are the &#8220;GATEKEEPERS&#8221; of quality on an agile team. In fact, if you&#8217;re doing it right &#8230; the entire team should be fully aware of the state of the app.</p>

<p>This is mainly because I believe that quality is the responsibility of the whole tea</p>

<p>This gets back to Ash&#8217;s comment. The WHOLE team is responsible for testing,</p>

<p>including automation. There should not be a backlog of automation as the</p>

<p>team should be working on automation as stories are being developed and not</p>

<p>move to the next story until it is complete - complete includes automation.</p>

<p>When applying ATDD and TDD process the automation should be developed BEFORE</p>

<p>the code - so again a backlog should never occur.</p>

<p>I do understand that things are not always this simple, sometimes the</p>

<p>automation is being done after the code is created. If this is the case then</p>

<p>I suggest looking to implement some WIP (Work In Progress) limits on the</p>

<p>queues /swim lanes(Kanban style). So put a limit on the number of stories</p>

<p>(not points) that can be in any swim lane at a time, for example 3 stories</p>

<p>are allowed &#8220;In Test&#8221;. If the developers are finished and want to move a</p>

<p>story from &#8220;In Development&#8221; to &#8220;In Test&#8221;  and there are already 3 stories</p>

<p>&#8220;In Test&#8221; thenthey must first help the testers to clear one of the stories</p>

<p>before they can move another story in. This prevents backlogs from building</p>

<p>up.</p>

<p>QA should be doing is helping the team to work out the best way of building the best quality application/system/product in the first place, rather than just checking the quality after something has been done.</p>

<p>With regards to <strong>environments</strong> it is very project specific, but a generic list</p>

<p>would be:</p>

<p>Testers machine - should be the same as a dev machine. Tester can checkout,</p>

<p>build and deploy then test the application when ever they want to.</p>

<p>System Test - an environment that is available for further exploratory</p>

<p>testing, showcases and other team members to look at the system. Should be</p>

<p>&#8220;more&#8221; production like then the CI machine - so have bigger data sets, more</p>

<p>production like hardware/network infrastructure (i.e. load balancers,</p>

<p>switches etc) and other systems - so less reliance on stubs and mocks.</p>

<p>SIT/Pre-Prod - an environment that has all integration points, both internal</p>

<p>ad external. Infrastructure and architecture should be inline with</p>

<p>production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capybara tutorial sing irb]]></title>
    <link href="http://codebreak.github.com/blog/2012/06/11/capybara-tutorial-using-irb/"/>
    <updated>2012-06-11T16:03:00-07:00</updated>
    <id>http://codebreak.github.com/blog/2012/06/11/capybara-tutorial-using-irb</id>
    <content type="html"><![CDATA[<p>At one of my previous projects, a fellow ThoughtWorker named Rob Hunter showed me how to use irb (Interactive Ruby Shell) to play around with capybara. I&#8217;ve found it pretty useful so I figured I&#8217;d share it here.</p>

<p>To get started, make sure you have ruby installed.</p>

<p>Launch irb with the following requirements (ruby, capybara, and capybara/dsl)</p>

<pre><code>irb -r rubygems -r capybara -r capybara/dsl
</code></pre>

<p>Include Cabybara:</p>

<pre><code>include Capybara::DSL
</code></pre>

<p>Set the default driver.</p>

<pre><code>Capybara.default_driver = :selenium
</code></pre>

<p>Now test that capybara commands work by visiting google</p>

<pre><code>visit "http://www.google.com"
</code></pre>

<h2>Here&#8217;s an example for logging into GMAIL</h2>

<pre><code>visit "http://www.gmail.com"
page.has_content?("A Google approach to email.")

fill_in 'Email', :with =&gt; "johnjames4343@gmail.com"
fill_in 'Passwd', :with =&gt; "johnjames4u"
click_button 'Sign in'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!!]]></title>
    <link href="http://codebreak.github.com/blog/2012/06/07/hello-world/"/>
    <updated>2012-06-07T00:05:00-07:00</updated>
    <id>http://codebreak.github.com/blog/2012/06/07/hello-world</id>
    <content type="html"><![CDATA[<p>Much love to @scottmuc for helping me setup my octopress blog!! :)</p>
]]></content>
  </entry>
  
</feed>
